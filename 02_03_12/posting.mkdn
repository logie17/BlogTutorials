# Abstract thou SQL

Let's take a break from [Moose](http://www.moose.org) and change gears a 
visit a topic that I believe every web developer will have to grapple 
with at some point or another - integrating
[SQL](http://en.wikipedia.org/wiki/SQL) with a web application. 
Often times it begins quite innocuously, or so the story goes, create a module that fetches some data
from a database, such as [SQLite](http://www.sqlite.org). Oh, and it'll also
does an insert.

Below is an example of a couple standard insert and update statements using the
ubiquitious [DBI](https://metacpan.org/module/DBI) module:

    my $sth = $dbh->prepare("select columny from tablex where id = ?");
    $sth->execute(1);

    $dbh->do("insert 
                into tablex (a,b)
                values (?,?)", undef ,(1,2) ); 

If the problem isn't abvious is that instead of just managing Perl it's that
we have to now manage two languages. The
language of Perl, the host language, and the new embedded
[DSL](http://en.wikipedia.org/wiki/Domain-specific_language) known as SQL. 
As the story goes with any code base, what begins as a small application soon grows to thousands of lines of
code with many modules that interact with various aspects of the database. The
once beautiful code base of Perl is now about 40% embedded SQL. It becomes
fragile to maintain and difficult to do any upgrades on the database itself
because of all the hard-coded SQL statements.

## The solution

Now that we have a clear understanding of the problem, how do we go about
solving t? First, let's imagine a world where SQL doesn't need 
to be created throughout one's site but instead abstracted using 
native [Perl](http://www.perl.org) data structures. Imagine being able to create SQL statements 
without having to write a single bit of SQL. Well, this world can be a reality with
[Abstract::SQL.](https://metacpan.org/module/SQL::Abstract)

Here are two simple examples of the same SQL above demonstrated in an abstract
way using Abstract::SQL. 

    my ($stmt, @bind) = $sql->select('tablex',
        [ 'columny' ],
        { id => 1 });
    $sth->prepare($stmt);
    $sth->execute(@binds);
            
    my($stmt, @binds) = $sql->insert('tablex', { 
        a => 1,
        b => 2
    });
    $dbh->do($stmt,undef,@binds);

The advantage as mentioned is that there is no longer the need to write SQL,
it is cleaner, and way less error prone. Abstract::SQL will generate the 
needed sql and the associated bound variables for the place holders - it 
works seamlessly with any exsting DBI calls. 

# Wrap up

[Abstract::SQL](https://metacpan.org/module/SQL::Abstract) is a nice well 
documented library that will go a long way in making nice clean and maintable 
code. However, there are a few shortcomings to SQL::Abstract in that it's 
lightweight and doesn't support many other more advanced SQL statements 
such as grouping or having. However, for the majority of the all SQL 
queries it will work just fine. So have fun and stop polluting the code 
base with embedded SQL!
